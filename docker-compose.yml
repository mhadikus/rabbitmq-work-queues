# version: '3'
# version is now obsolete

services:
  # RabbitMQ Server
  rabbitmq-server:
    image: rabbitmq:${RABBITMQ_VERSION}
    container_name: ${RABBITMQ_CONTAINER_NAME}
    ports:
      - ${RABBITMQ_AMQP_HOST_PORT}:${RABBITMQ_AMQP_PORT}
      - ${RABBITMQ_MANAGEMENT_HOST_PORT}:${RABBITMQ_MANAGEMENT_PORT}
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      # https://www.rabbitmq.com/docs/vhosts
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
      # The RabbitMQ management plugin provides an HTTP-based API for management and monitoring of RabbitMQ nodes and clusters,
      # along with a browser-based UI and a command line tool, rabbitmqadmin
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management plugin rabbitmq_management"
    volumes:
      - ${RABBITMQ_HOST_DIRECTORY}:/var/lib/rabbitmq

  # Container for producer consumer Python services
  producer-consumer:
    image: producer-consumer:latest
    stdin_open: true
    tty: true
    environment:
      - RABBITMQ_HOST=rabbitmq-server
      - RABBITMQ_PORT=${RABBITMQ_AMQP_PORT}
      - RABBITMQ_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_VIRTUAL_HOST=${RABBITMQ_DEFAULT_VHOST}
      - MINIO_URL=${MINIO_URL}
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
      - MONGODB_URI=mongodb://{username}:{password}@mongodb:${MONGODB_PORT}
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PW=${MONGODB_PW}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    volumes:
      - ${HOST_DIRECTORY}:/mycode

  # MinIO high performance storage compatible with AWS S3 cloud storage service
  # https://github.com/minio/minio?tab=readme-ov-file#readme
  minio:
    image: minio/minio
    ports:
      - ${MINIO_API_PORT}:${MINIO_API_PORT}
      - ${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    volumes:
      - ${MINIO_HOST_DIRECTORY}:/data
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"

  # MinIO Client mc command line tool for creating buckets
  # https://min.io/docs/minio/linux/reference/minio-mc.html
  minio-mc:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set my-minio ${MINIO_URL} ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      /usr/bin/mc mb ${MINIO_BUCKETS};
      exit 0;
      "

  # MongoDB Server
  mongodb:
    image: mongo
    ports:
      - ${MONGODB_PORT}:${MONGODB_PORT}
    volumes:
      - ${MONGODB_HOST_DIRECTORY}:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PW}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}

  # Elasticsearch Engine
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION}
    ports:
      - ${ELASTICSEARCH_API_PORT}:${ELASTICSEARCH_API_PORT}
      - ${ELASTICSEARCH_TRANSPORT_PORT}:${ELASTICSEARCH_TRANSPORT_PORT}
    environment:
      - node.name=elasticsearch
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
    volumes:
      - ${ELASTICSEARCH_DIRECTORY}:/usr/share/elasticsearch/data

  # Kibana Dashboard for Elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    environment:
      - ELASTICSEARCH=http://elasticsearch:${ELASTICSEARCH_API_PORT}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    volumes:
      - ${KIBANA_HOST_DIRECTORY}:/usr/share/kibana/data
